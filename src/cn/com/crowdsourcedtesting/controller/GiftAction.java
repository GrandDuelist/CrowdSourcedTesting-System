/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package cn.com.crowdsourcedtesting.controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import cn.com.crowdsourcedtesting.DAO.GiftDAO;
import cn.com.crowdsourcedtesting.bean.Gift;
import cn.com.crowdsourcedtesting.struts.form.GiftForm;
import cn.com.other.page.Page;

/** 
 * MyEclipse Struts
 * Creation date: 05-01-2014
 * 
 * XDoclet definition:
 * @struts.action path="/gift" name="giftForm" input="/gifts.jsp" scope="request" validate="true"
 */
public class GiftAction extends DispatchAction {
	
	private String gifttype = "all";
	
	
	/*
	 * Generated Methods
	 */

	/** 
	 * Method selectGift
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward selectGift(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		GiftForm giftForm = (GiftForm) form;// TODO Auto-generated method stub
		int id = giftForm.getGiftId();
		System.out.println("gift id: "+id);
		GiftDAO dao = new GiftDAO();
		request.setAttribute("giftitem", dao.findById(id));
		request.setAttribute("isLegal", "legal");
		return mapping.findForward("giftitem");
	}
	
	public ActionForward selectRecentGift(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		GiftForm giftForm = (GiftForm) form;// TODO Auto-generated method stub
		int pagenow = 1;
		this.gifttype = "all";
		System.out.println("Page Now: "+1);
		List<Gift> gifts = new ArrayList();
		GiftDAO dao = new GiftDAO();
		//一页16个礼品
		Page page = new Page();
		page.setCurrentPage(pagenow);
		page.setPerRows(16);
		page.setTotalRows(dao.getTotalRows());
		
		gifts = dao.findByPage(page);
		request.setAttribute("gifts", gifts);
		request.setAttribute("page", page);
		request.setAttribute("isLegal", "legal");
		return mapping.findForward("allgifts");
	}
	/** 
	 * Method selectPage
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward selectPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		GiftForm giftForm = (GiftForm) form;// TODO Auto-generated method stub
		int pagenow = giftForm.getPagenow();
		System.out.println("Page Now: "+pagenow);
		List<Gift> gifts = new ArrayList();
		GiftDAO dao = new GiftDAO();
		Page page = new Page();
		//一页16个礼品
		if(this.gifttype.equals("all"))
		{
			page.setCurrentPage(pagenow);
			page.setPerRows(16);
			page.setTotalRows(dao.getTotalRows());

			gifts = dao.findByPage(page);
			request.setAttribute("gifts", gifts);
			request.setAttribute("page", page);
			request.setAttribute("isLegal", "legal");
		}
		if(this.gifttype.equals("available"))
		{
			page.setCurrentPage(pagenow);
			page.setPerRows(16);
			Double userCredit = 5000.0;
			page.setTotalRows(dao.getTotalAvailableRows(userCredit));

			gifts = dao.findAvailableByPage(userCredit, page);
			request.setAttribute("gifts", gifts);
			request.setAttribute("page", page);
			request.setAttribute("isLegal", "legal");
		}
		
		return mapping.findForward("allgifts");
	}
	
	/** 
	 * Method selectAllGifts
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward selectAllGifts(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		GiftForm giftForm = (GiftForm) form;// TODO Auto-generated method stub
		int pagenow = 1;
		this.gifttype = "all";
		System.out.println("Page Now: "+1);
		List<Gift> gifts = new ArrayList();
		GiftDAO dao = new GiftDAO();
		//一页16个礼品
		Page page = new Page();
		page.setCurrentPage(pagenow);
		page.setPerRows(16);
		page.setTotalRows(dao.getTotalRows());
		
		gifts = dao.findByPage(page);
		request.setAttribute("gifts", gifts);
		request.setAttribute("page", page);
		request.setAttribute("isLegal", "legal");
		return mapping.findForward("allgifts");
	}
	
	/** 
	 * Method selectAvailableGifts
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward selectAvailableGifts(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		GiftForm giftForm = (GiftForm) form;// TODO Auto-generated method stub
		int pagenow = 1;
		this.gifttype = "available";
		//session里面拿用户的积分数值
		Double creditlimit = 5000.0;
		System.out.println("Page Now: "+pagenow);
		List<Gift> gifts = new ArrayList();
		GiftDAO dao = new GiftDAO();
		//一页16个礼品
		Page page = new Page();
		page.setCurrentPage(pagenow);
		page.setPerRows(16);
		page.setTotalRows(dao.getTotalAvailableRows(creditlimit));
		
		gifts = dao.findAvailableByPage(creditlimit, page);
		request.setAttribute("gifts", gifts);
		request.setAttribute("page", page);
		request.setAttribute("isLegal", "legal");
		return mapping.findForward("allgifts");
	}
	
	/** 
	 * Method getGift
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward getGift(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		GiftForm giftForm = (GiftForm) form;// TODO Auto-generated method stub
		
		System.out.println("兑换1");
		Gift gift = new Gift();
		int id = giftForm.getGiftId();
		System.out.println("兑换2:"+id);
		GiftDAO dao = new GiftDAO();
		Double creditneeded = dao.findById(id).getGiftCredit();
		Double usercredit = 5000.0;
		//判断用户积分和所需积分大小
		if(usercredit >= creditneeded)
		{
			System.out.println("兑换3");
			return this.selectAllGifts(mapping, giftForm, request, response);
		}
		else
		{
			System.out.println("兑换4");
			return this.selectAllGifts(mapping, giftForm, request, response);
		}
		
	}
	
	
	private ActionForward gotoGifts(ActionMapping mapping, HttpServletRequest request, HttpServletResponse response)
	{
		return null;
	}
	
}