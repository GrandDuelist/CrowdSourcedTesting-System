/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package cn.com.crowdsourcedtesting.controller;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionRedirect;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.upload.FormFile;

import cn.com.crowdsourcedtesting.DAO.BugReportDAO;
import cn.com.crowdsourcedtesting.DAO.JoinTaskDAO;
import cn.com.crowdsourcedtesting.DAO.TestTaskDAO;
import cn.com.crowdsourcedtesting.bean.BugReport;
import cn.com.crowdsourcedtesting.bean.TestTask;
import cn.com.crowdsourcedtesting.bean.Tester;
import cn.com.crowdsourcedtesting.model.GeneralHelperHandler;
import cn.com.crowdsourcedtesting.modelhelper.TaskType;
import cn.com.crowdsourcedtesting.struts.form.TestTaskDetailViewForm;

/**
 * MyEclipse Struts Creation date: 05-28-2014
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/testTaskDetailView" name="testTaskDetailViewForm"
 *                input="/form/testTaskDetailView.jsp" scope="request"
 *                validate="true"
 */
public class TestTaskDetailViewAction extends DispatchAction {
	/*
	 * Generated Methods
	 */

	GeneralHelperHandler generalHelperHandler = new GeneralHelperHandler();

	private String bugReportErrorMessageAttributeName = "BugReportPublishErrorMessage";
	private String bugReportNotFinishedErrorMessage = "请将必要的内容填写完整";
	private String bugImageTypeErrorMessage = "上传图标类型错误";
	private String bugReportSystemErrorMessage = "系统错误，请重试";

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward detailView(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TestTaskDetailViewForm testTaskDetailViewForm = (TestTaskDetailViewForm) form;
		Integer testTaskId = testTaskDetailViewForm.getTaskID();
		if (testTaskId == null) {
			return new ActionRedirect(mapping.findForwardConfig("dispPage"));
		}
		TestTaskDAO testTaskDAO = new TestTaskDAO();
		TestTask testTask = testTaskDAO.findById(testTaskId);
		if (testTask == null) {
			return new ActionRedirect(mapping.findForwardConfig("dispPage"));
		}
		request.getSession().setAttribute("TaskDetail", testTask);
		Tester tester = (Tester) request.getSession().getAttribute("Tester");
		if (tester != null) {
			JoinTaskDAO joinTaskDAO = new JoinTaskDAO();
			if (joinTaskDAO.isExist(tester, testTask)) {
				request.getSession().setAttribute("HasJoinedTask", "true");
			} else {
				request.getSession().setAttribute("HasJoinedTask", "false");
			}
		}
		return mapping.findForward("taskDetailPage");
	}

	public ActionForward joinTask(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TestTaskDetailViewForm testTaskDetailViewForm = (TestTaskDetailViewForm) form;
		Integer testTaskId = testTaskDetailViewForm.getTaskID();
		if (testTaskId == null) {
			return new ActionRedirect(mapping.findForwardConfig("dispPage"));
		}
		Tester tester = (Tester) request.getSession().getAttribute("Tester");
		if (tester == null) {
			return new ActionRedirect(mapping.findForwardConfig("testerLogin"));
		}

		TestTaskDAO testTaskDAO = new TestTaskDAO();
		TestTask testTask = testTaskDAO.findById(testTaskId);
		JoinTaskDAO joinTaskDAO = new JoinTaskDAO();
		if (joinTaskDAO.isExist(tester, testTask)) {
			joinTaskDAO.addJoinTask(tester, testTask);
		}
		switch (testTask.getTaskType()) {
		case (TaskType.Web):
			return new ActionRedirect("http://www.baidu.com");
		case (TaskType.Android):
			break;
		case (TaskType.Desktop):
			break;
		}
		return null;
	}

	public ActionForward bugReportPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TestTaskDetailViewForm testTaskDetailViewForm = (TestTaskDetailViewForm) form;
		Integer testTaskId = testTaskDetailViewForm.getTaskID();
		if (testTaskId == null) {
			return new ActionRedirect(mapping.findForwardConfig("dispPage"));
		}
		Tester tester = (Tester) request.getSession().getAttribute("Tester");
		if (tester == null) {
			return new ActionRedirect(mapping.findForwardConfig("testerLogin"));
		}

		TestTaskDAO testTaskDAO = new TestTaskDAO();
		TestTask testTask = testTaskDAO.findById(testTaskId);
		if (testTask == null) {
			return new ActionRedirect(mapping.findForwardConfig("dispPage"));
		}
		request.getSession().setAttribute("TaskDetail", testTask);

		return mapping.findForward("bugReportPage");
	}

	public ActionForward bugReportSubmit(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		TestTaskDetailViewForm testTaskDetailViewForm = (TestTaskDetailViewForm) form;

		System.out.println(testTaskDetailViewForm.getBugOperation());
		System.out.println(testTaskDetailViewForm.getBugResult());
		System.out.println(testTaskDetailViewForm.getBugTitle());
		System.out.println(testTaskDetailViewForm.getBugType());
		System.out.println(testTaskDetailViewForm.getBugImage().getFileName());
		System.out.println(testTaskDetailViewForm.getTaskID());

		Integer testTaskId = testTaskDetailViewForm.getTaskID();
		if (testTaskId == null) {
			return new ActionRedirect(mapping.findForwardConfig("dispPage"));
		}
		Tester tester = (Tester) request.getSession().getAttribute("Tester");
		if (tester == null) {
			return new ActionRedirect(mapping.findForwardConfig("testerLogin"));
		}
		TestTaskDAO testTaskDAO = new TestTaskDAO();
		TestTask testTask = testTaskDAO.findById(testTaskId);
		if (testTask == null) {
			return new ActionRedirect(mapping.findForwardConfig("dispPage"));
		}

		if (testTaskDetailViewForm.getBugTitle() == null
				|| testTaskDetailViewForm.getBugOperation() == null
				|| testTaskDetailViewForm.getBugResult() == null) {
			request.getSession().setAttribute(
					bugReportErrorMessageAttributeName,
					bugReportNotFinishedErrorMessage);
			ActionRedirect actionRedirect = new ActionRedirect(
					mapping.findForwardConfig("bugReportPageRedirect"));
			actionRedirect.addParameter("method", "bugReportPage");
			actionRedirect.addParameter("taskID",
					testTaskDetailViewForm.getTaskID());
			return actionRedirect;
		}

		FormFile bugImage = testTaskDetailViewForm.getBugImage();
		String bugImagePath = null;
		if (bugImage != null) {
			String[] fileName = bugImage.getFileName().split("\\.");
			if (fileName.length <= 1
					|| !generalHelperHandler
							.isPic(fileName[fileName.length - 1])) {
				request.getSession().setAttribute(
						bugReportErrorMessageAttributeName,
						bugImageTypeErrorMessage);
				ActionRedirect actionRedirect = new ActionRedirect(
						mapping.findForwardConfig("bugReportPageRedirect"));
				actionRedirect.addParameter("method", "bugReportPage");
				actionRedirect.addParameter("taskID",
						testTaskDetailViewForm.getTaskID());
				return actionRedirect;
			}
			bugImagePath = "bug_report/task_" + testTask.getTaskId()
					+ "_tester_" + tester.getTesterId() + "_"
					+ System.currentTimeMillis() + "."
					+ fileName[fileName.length - 1];
			String bugImageRealPath = request.getSession().getServletContext()
					.getRealPath("/" + bugImagePath);
			try {
				BufferedInputStream bin = new BufferedInputStream(
						bugImage.getInputStream());
				BufferedOutputStream bout = new BufferedOutputStream(
						new FileOutputStream(bugImageRealPath));
				int bufferSize = 0;
				byte[] buffer = new byte[1024];
				while ((bufferSize = bin.read(buffer, 0, buffer.length)) != -1) {
					bout.write(buffer, 0, bufferSize);
				}
				bout.flush();
				bout.close();
				bin.close();
			} catch (IOException e) {
				e.printStackTrace();
				request.getSession().setAttribute(
						bugReportErrorMessageAttributeName,
						bugReportSystemErrorMessage);
				ActionRedirect actionRedirect = new ActionRedirect(
						mapping.findForwardConfig("bugReportPageRedirect"));
				actionRedirect.addParameter("method", "bugReportPage");
				actionRedirect.addParameter("taskID",
						testTaskDetailViewForm.getTaskID());
				return actionRedirect;
			}
		}
		BugReport bugReport = new BugReport();
		bugReport.setOperation(testTaskDetailViewForm.getBugOperation());
		bugReport.setOperationResult(testTaskDetailViewForm.getBugResult());
		bugReport.setPicture(bugImagePath);
		bugReport.setReportTitle(testTaskDetailViewForm.getBugTitle());
		bugReport.setTester(tester);
		bugReport.setTestTask(testTask);
		BugReportDAO bugReportDAO = new BugReportDAO();
		bugReportDAO.addBugReport(bugReport);
		return mapping.findForward("taskDetailPage");
	}
}